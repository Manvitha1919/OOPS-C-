#include <iostream>
#include <vector>
using namespace std;

class Matrix {
private:
    vector<vector<int>> data;
    size_t rows;
    size_t cols;

public:
    Matrix(size_t rows, size_t cols) : rows(rows), cols(cols) {
        data.resize(rows, vector<int>(cols, 0));
    }

    Matrix operator+(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            cerr << "Error: Matrices must have the same dimensions for addition." << endl;
            return Matrix(0, 0); // Return an empty matrix
        }

        Matrix result(rows, cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }
    Matrix operator-(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            cerr << "Error: Matrices must have the same dimensions for subtraction." << endl;
            return Matrix(0, 0); // Return an empty matrix
        }

        Matrix result(rows, cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }
    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            cerr << "Error: Number of columns in the first matrix must be equal to the number of rows in the second matrix for multiplication." << endl;
            return Matrix(0, 0); 
        }

        Matrix result(rows, other.cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                for (size_t k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }
    void display() const {
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Matrix A(2, 3);
    A.display();
    cout << endl;

    Matrix B(3, 2);
    B.display();
    cout << endl;
    Matrix C = A + B;
    cout << "Matrix Addition Result:" << endl;
    C.display();
    cout << endl;
    Matrix D = A - B;
    cout << "Matrix Subtraction Result:" << endl;
    D.display();
    cout << endl;
    Matrix E = A * B;
    cout << "Matrix Multiplication Result:" << endl;
    E.display();
    cout << endl;

    return 0;
}
