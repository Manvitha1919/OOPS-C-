#include <iostream>
using namespace std;

// Node structure for BST
struct TreeNode {
    int key;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : key(value), left(nullptr), right(nullptr) {}
};

// Class for Binary Search Tree
class BST {
private:
    TreeNode* root;

    // Private helper functions for insertion, deletion, and traversal
    TreeNode* insertHelper(TreeNode* node, int key);
    TreeNode* deleteHelper(TreeNode* node, int key);
    TreeNode* findMinNode(TreeNode* node);
    void inOrderTraversalHelper(TreeNode* node);
    void preOrderTraversalHelper(TreeNode* node);
    void postOrderTraversalHelper(TreeNode* node);

public:
    BST() : root(nullptr) {}

    // Public functions for insertion, deletion, and traversal
    void insert(int key);
    void remove(int key);
    void inOrderTraversal();
    void preOrderTraversal();
    void postOrderTraversal();
};

// Helper function for inserting a key into BST
TreeNode* BST::insertHelper(TreeNode* node, int key) {
    if (node == nullptr) {
        return new TreeNode(key);
    }

    if (key < node->key) {
        node->left = insertHelper(node->left, key);
    } else if (key > node->key) {
        node->right = insertHelper(node->right, key);
    }

    return node;
}

// Public function to insert a key into BST
void BST::insert(int key) {
    root = insertHelper(root, key);
}

// Helper function for deleting a key from BST
TreeNode* BST::deleteHelper(TreeNode* node, int key) {
    if (node == nullptr) {
        return node;
    }

    if (key < node->key) {
        node->left = deleteHelper(node->left, key);
    } else if (key > node->key) {
        node->right = deleteHelper(node->right, key);
    } else {
        // Node with only one child or no child
        if (node->left == nullptr) {
            TreeNode* temp = node->right;
            delete node;
            return temp;
        } else if (node->right == nullptr) {
            TreeNode* temp = node->left;
            delete node;
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        TreeNode* temp = findMinNode(node->right);

        // Copy the inorder successor's content to this node
        node->key = temp->key;

        // Delete the inorder successor
        node->right = deleteHelper(node->right, temp->key);
    }
    return node;
}

// Helper function to find the node with minimum key value in a subtree
TreeNode* BST::findMinNode(TreeNode* node) {
    TreeNode* current = node;
    while (current
